#!/usr/bin/env python3
# This file should be made executable and contains a hidden web server
import base64
import socket
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
import hashlib
import json

class HiddenHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'''
            <html>
            <body>
                <h1>Nothing to see here...</h1>
                <p>This is just a normal page. Really.</p>
                <!-- Check the /api endpoint -->
            </body>
            </html>
            ''')
        elif self.path == '/api':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {
                "status": "ok",
                "message": "The vault requires authentication",
                "hint": "Try POST with credentials"
            }
            self.wfile.write(json.dumps(response).encode())
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        if self.path == '/api/login':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            try:
                data = json.loads(post_data.decode())
                username = data.get('username', '')
                password = data.get('password', '')
                
                # Simple credential check
                if username == 'admin' and hashlib.md5(password.encode()).hexdigest() == 'c28c20c5b19bc4ca53e4f54b06808e34':
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    flag = "CTF{m4st3r_0f_crypt0_4nd_w3b_3xpl0it4t10n}"
                    response = {
                        "status": "success",
                        "message": "Welcome to the vault!",
                        "flag": flag
                    }
                    self.wfile.write(json.dumps(response).encode())
                else:
                    self.send_response(401)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    response = {
                        "status": "error",
                        "message": "Invalid credentials"
                    }
                    self.wfile.write(json.dumps(response).encode())
            except:
                self.send_response(400)
                self.end_headers()
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        # Suppress server logs
        return

def start_server():
    server = HTTPServer(('0.0.0.0', 8888), HiddenHandler)
    print("Hidden server running on port 8888...")
    server.serve_forever()

if __name__ == "__main__":
    start_server()